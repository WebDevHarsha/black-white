{
  "metadata": {
    "name": "New JSNB",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Three.js Shooting Game with Camera Background</title>\n    <style>\n        /* Allow scrolling on the body */\n        html, body {\n            margin: 0;\n            height: 100%; /* Allow full height but allow scrolling */\n            overflow: auto; /* Allow scrolling */\n            position: relative; /* Allow other elements to be positioned freely */\n        }\n\n        /* Set up the video background */\n        video {\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            object-fit: cover;\n            z-index: 2; /* Place the video in the background */\n        }\n\n        /* Positioning the Three.js canvas */\n        canvas {\n            position: absolute;\n            top: 50;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            display: block;\n            z-index: 3; /* Make sure the canvas is above the video */\n        }\n\n        /* Crosshair styling */\n        #crosshair {\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            font-size: 30px;\n            color: red;\n            font-weight: bold;\n            transform: translate(-50%, -50%);\n            pointer-events: none;\n            z-index: 4; /* Ensure crosshair is on top */\n        }\n    </style>\n</head>\n<body>\n    <!-- Video element for the background camera feed -->\n    <video id=\"myVideo\" autoplay playsinline muted></video>\n\n    <!-- Crosshair overlay (centered as a \"+\" symbol) -->\n    <div id=\"crosshair\">+</div>\n\n    <!-- Three.js game script -->\n    <script type=\"module\" src=\"game.js\"></script>\n</body>\n</html>",
      "status": "",
      "output": "\n\n\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Three.js Shooting Game with Camera Background</title>\n    <style>\n        /* Allow scrolling on the body */\n        html, body {\n            margin: 0;\n            height: 100%; /* Allow full height but allow scrolling */\n            overflow: auto; /* Allow scrolling */\n            position: relative; /* Allow other elements to be positioned freely */\n        }\n\n        /* Set up the video background */\n        video {\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            object-fit: cover;\n            z-index: 2; /* Place the video in the background */\n        }\n\n        /* Positioning the Three.js canvas */\n        canvas {\n            position: absolute;\n            top: 50;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            display: block;\n            z-index: 3; /* Make sure the canvas is above the video */\n        }\n\n        /* Crosshair styling */\n        #crosshair {\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            font-size: 30px;\n            color: red;\n            font-weight: bold;\n            transform: translate(-50%, -50%);\n            pointer-events: none;\n            z-index: 4; /* Ensure crosshair is on top */\n        }\n    </style>\n\n\n    <!-- Video element for the background camera feed -->\n    <video id=\"myVideo\" autoplay=\"\" playsinline=\"\" muted=\"\"></video>\n\n    <!-- Crosshair overlay (centered as a \"+\" symbol) -->\n    <div id=\"crosshair\">+</div>\n\n    <!-- Three.js game script -->\n    <script type=\"module\" src=\"game.js\"></script>\n\n",
      "type": "html"
    },
    {
      "code": "window.THREE = await import('https://cdn.skypack.dev/three@0.132.2');\n\n// Access rear camera for background\nconst video = document.getElementById('myVideo');\n\nnavigator.mediaDevices.getUserMedia({ video: { facingMode: \"environment\" } }) // Use the rear camera\n    .then((cameraStream) => {\n        video.srcObject = cameraStream; // Set the camera stream to the video element\n    })\n    .catch((error) => {\n        console.error('Error accessing camera:', error.message);\n    });\n\n// Scene, Camera, Renderer setup\nconst scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\nconst renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true }); // 'alpha: true' makes the background transparent\nrenderer.setSize(window.innerWidth, window.innerHeight);\nrenderer.setClearColor(0x000000, 0); // Set renderer background to transparent\ndocument.body.appendChild(renderer.domElement);\n\n// Lighting setup\nconst light = new THREE.DirectionalLight(0xffffff, 1);\nlight.position.set(10, 10, 10).normalize();\nscene.add(light);\n\n// Create target geometry and material\nconst targetGeometry = new THREE.SphereGeometry(0.5, 16, 16);\nconst targetMaterial = new THREE.MeshStandardMaterial({ color: 0xff0000 });\nconst targets = [];\n\n// Function to generate a new target at a random position\nfunction createTarget() {\n    const target = new THREE.Mesh(targetGeometry, targetMaterial);\n    target.position.x = Math.random() * 10 - 5;\n    target.position.y = Math.random() * 5 - 2.5;\n    target.position.z = -10 - Math.random() * 10;\n    scene.add(target);\n    targets.push(target);\n}\n\n// Initialize 5 targets\nfor (let i = 0; i < 5; i++) {\n    createTarget();  // Use the function to generate targets\n}\n\n// Bullet setup\nconst bulletGeometry = new THREE.SphereGeometry(0.1, 8, 8);\nconst bulletMaterial = new THREE.MeshBasicMaterial({ color: 0xffff00 });\nconst bullets = [];\n\n// Shooting functionality\nwindow.addEventListener('click', (event) => {\n    const bullet = new THREE.Mesh(bulletGeometry, bulletMaterial);\n    bullet.position.set(camera.position.x, camera.position.y, camera.position.z);\n    bullet.velocity = new THREE.Vector3(0, 0, -1).applyEuler(camera.rotation);\n    scene.add(bullet);\n    bullets.push(bullet);\n}, { passive: true });\n\n// Gyroscope control\nif ('Gyroscope' in window) {\n    const gyroscope = new Gyroscope({ frequency: 60 });\n\n    gyroscope.addEventListener('reading', () => {\n        const sensitivity = 0.02; // Adjust sensitivity to your liking\n        const maxRotationSpeed = 0.1; // Limit max rotation speed\n\n        camera.rotation.x += Math.min(gyroscope.x * sensitivity, maxRotationSpeed);\n        camera.rotation.y += Math.min(gyroscope.y * sensitivity, maxRotationSpeed);\n        camera.rotation.z += Math.min(gyroscope.z * sensitivity, maxRotationSpeed);\n    });\n\n    gyroscope.start();\n} else {\n    alert('Gyroscope not supported on this device/browser.');\n}\n\n// Create crosshair element dynamically\nconst crosshair = document.createElement('div');\ncrosshair.style.position = 'absolute';\ncrosshair.style.top = '50%';\ncrosshair.style.left = '50%';\ncrosshair.style.fontSize = '30px';\ncrosshair.style.color = 'red';\ncrosshair.style.fontWeight = 'bold';\ncrosshair.style.transform = 'translate(-50%, -50%)';\ncrosshair.style.pointerEvents = 'none';\ncrosshair.textContent = '+'; // The crosshair as a '+' symbol\ndocument.body.appendChild(crosshair);\n\n// Animation loop\nfunction animate() {\n    requestAnimationFrame(animate);\n\n    // Update bullet positions\n    bullets.forEach((bullet, index) => {\n        bullet.position.add(bullet.velocity);\n        if (bullet.position.z < -50) {\n            scene.remove(bullet);\n            bullets.splice(index, 1);\n        }\n    });\n\n    // Check for collisions and regenerate targets\n    bullets.forEach((bullet, bIndex) => {\n        targets.forEach((target, tIndex) => {\n            const distance = bullet.position.distanceTo(target.position);\n            if (distance < 0.5) {\n                // Remove target and bullet on collision\n                scene.remove(target);\n                targets.splice(tIndex, 1);\n                scene.remove(bullet);\n                bullets.splice(bIndex, 1);\n\n                // Create a new target after a hit\n                createTarget();\n            }\n        });\n    });\n\n    renderer.render(scene, camera);\n}\n\n// Handle window resize\nwindow.addEventListener('resize', () => {\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n}, { passive: true });\n\n// Start the animation loop\nanimate();",
      "status": "[4]<br><span style=\"font-size:8px\">104ms<span></span></span>",
      "output": "",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": false
}