{
  "metadata": {
    "name": "New JSNB",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>AR Shooting Game</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n\n        body {\n            overflow: hidden;\n            background: #000;\n            font-family: Arial, sans-serif;\n        }\n\n        #gameContainer {\n            position: relative;\n            width: 100vw;\n            height: 100vh;\n        }\n\n        #videoElement {\n            position: absolute;\n            width: 100%;\n            height: 100%;\n            object-fit: cover;\n            z-index: 1;\n        }\n\n        #gameCanvas {\n            position: absolute;\n            width: 100%;\n            height: 100%;\n            z-index: 2;\n            cursor: crosshair;\n        }\n\n        .hud {\n            position: fixed;\n            padding: 20px;\n            color: #fff;\n            font-size: 24px;\n            text-shadow: 2px 2px 4px rgba(0,0,0,0.5);\n            z-index: 3;\n        }\n\n        #score {\n            top: 0;\n            left: 0;\n        }\n\n        #health {\n            top: 0;\n            right: 0;\n        }\n\n        #ammo {\n            bottom: 20px;\n            right: 20px;\n        }\n\n        #gameOver {\n            position: fixed;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            background: rgba(0, 0, 0, 0.8);\n            color: #fff;\n            padding: 20px;\n            border-radius: 10px;\n            text-align: center;\n            display: none;\n            z-index: 4;\n        }\n\n        #startButton {\n            position: fixed;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            padding: 15px 30px;\n            font-size: 20px;\n            background: #4CAF50;\n            color: white;\n            border: none;\n            border-radius: 5px;\n            cursor: pointer;\n            z-index: 5;\n        }\n\n        #startButton:hover {\n            background: #45a049;\n        }\n\n        .crosshair {\n            position: fixed;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            width: 20px;\n            height: 20px;\n            border: 2px solid #fff;\n            border-radius: 50%;\n            pointer-events: none;\n            z-index: 3;\n        }\n\n        .flash {\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background: rgba(255, 255, 255, 0.1);\n            z-index: 2;\n            pointer-events: none;\n            opacity: 0;\n            transition: opacity 0.1s;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"gameContainer\">\n        <video id=\"videoElement\" autoplay playsinline></video>\n        <canvas id=\"gameCanvas\"></canvas>\n        <div class=\"crosshair\"></div>\n        <div class=\"flash\"></div>\n        <div class=\"hud\" id=\"score\">Score: 0</div>\n        <div class=\"hud\" id=\"health\">Health: 100</div>\n        <div class=\"hud\" id=\"ammo\">Ammo: 30</div>\n        <button id=\"startButton\">Start Game</button>\n        <div id=\"gameOver\">\n            <h2>Game Over!</h2>\n            <p id=\"finalScore\">Score: 0</p>\n        </div>\n    </div>\n    <script src=\"game.js\"></script>\n</body>\n</html>",
      "status": "",
      "output": "",
      "type": "html"
    },
    {
      "code": "// Game state\nlet gameActive = false;\nlet score = 0;\nlet health = 100;\nlet ammo = 30;\nlet targets = [];\nlet lastShot = 0;\nlet reloading = false;\n\n// Canvas setup\nconst canvas = document.getElementById('gameCanvas');\nconst ctx = canvas.getContext('2d');\nconst video = document.getElementById('videoElement');\nconst startButton = document.getElementById('startButton');\nconst gameOverScreen = document.getElementById('gameOver');\nconst flash = document.querySelector('.flash');\n\n// Track high score\nlet highScore = localStorage.getItem('highScore') || 0;\n\n// Resize canvas to match window size\nfunction resizeCanvas() {\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n}\nresizeCanvas();\nwindow.addEventListener('resize', resizeCanvas);\n\n// Initialize camera\nasync function initializeCamera() {\n    try {\n        const stream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' } });\n        video.srcObject = stream;\n    } catch (err) {\n        console.error(\"Error accessing camera:\", err);\n        alert(\"Camera access is required to play this game!\");\n    }\n}\n\n// Target class\nclass Target {\n    constructor() {\n        this.size = Math.random() * 50 + 50;\n        this.x = Math.random() * (canvas.width - this.size);\n        this.y = Math.random() * (canvas.height - this.size);\n        this.speedX = (Math.random() - 0.5) * 2;\n        this.speedY = (Math.random() - 0.5) * 2;\n        this.health = 1;\n        this.color = `hsl(${Math.random() * 360}, 70%, 50%)`;\n        this.lastShot = 0;\n        this.points = Math.floor(100 / this.size * 10);\n    }\n\n    update() {\n        this.x += this.speedX;\n        this.y += this.speedY;\n\n        if (this.x <= 0 || this.x + this.size >= canvas.width) this.speedX *= -1;\n        if (this.y <= 0 || this.y + this.size >= canvas.height) this.speedY *= -1;\n\n        if (Math.random() < 0.01) {\n            this.speedX = (Math.random() - 0.5) * 2;\n            this.speedY = (Math.random() - 0.5) * 2;\n        }\n\n        if (Date.now() - this.lastShot > 2000 && Math.random() < 0.01) {\n            this.shoot();\n            this.lastShot = Date.now();\n        }\n    }\n\n    draw() {\n        ctx.fillStyle = this.color;\n        ctx.beginPath();\n        ctx.arc(this.x + this.size/2, this.y + this.size/2, this.size/2, 0, Math.PI * 2);\n        ctx.fill();\n    }\n\n    shoot() {\n        if (health > 0) {\n            health -= 5;\n            updateHUD();\n            checkGameOver();\n        }\n    }\n}\n\n// Game functions\nfunction spawnTarget() {\n    if (targets.length < 8 && Math.random() < 0.05) {\n        targets.push(new Target());\n    }\n}\n\nfunction updateTargets() {\n    for (let i = targets.length - 1; i >= 0; i--) {\n        targets[i].update();\n        if (targets[i].health <= 0) {\n            score += targets[i].points;\n            targets.splice(i, 1);\n            updateHUD();\n        }\n    }\n}\n\nfunction drawTargets() {\n    targets.forEach(target => target.draw());\n}\n\nfunction shoot(e) {\n    if (!gameActive || reloading || ammo <= 0) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n\n    if (Date.now() - lastShot < 100) return;\n    lastShot = Date.now();\n\n    flash.style.opacity = '1';\n    setTimeout(() => flash.style.opacity = '0', 50);\n\n    ammo--;\n    updateHUD();\n\n    targets.forEach(target => {\n        const dx = x - (target.x + target.size/2);\n        const dy = y - (target.y + target.size/2);\n        const distance = Math.sqrt(dx * dx + dy * dy);\n\n        if (distance < target.size/2) {\n            target.health = 0;\n            ctx.fillStyle = 'white';\n            ctx.beginPath();\n            ctx.arc(x, y, 5, 0, Math.PI * 2);\n            ctx.fill();\n        }\n    });\n\n    if (ammo <= 0) reload();\n}\n\nfunction reload() {\n    if (reloading) return;\n    reloading = true;\n    setTimeout(() => {\n        ammo = 30;\n        reloading = false;\n        updateHUD();\n    }, 2000);\n}\n\nfunction updateHUD() {\n    document.getElementById('score').textContent = `Score: ${score}`;\n    document.getElementById('health').textContent = `Health: ${health}`;\n    document.getElementById('ammo').textContent = reloading ? 'Reloading...' : `Ammo: ${ammo}`;\n}\n\nfunction resetGame() {\n    gameActive = true;\n    score = 0;\n    health = 100;\n    ammo = 30;\n    targets = [];\n    lastShot = 0;\n    reloading = false;\n    gameOverScreen.style.display = 'none';\n    updateHUD();\n    gameLoop();\n}\n\nfunction checkGameOver() {\n    if (health <= 0) {\n        gameActive = false;\n        \n        // Update high score\n        if (score > highScore) {\n            highScore = score;\n            localStorage.setItem('highScore', highScore);\n        }\n        \n        // Update game over screen\n        const finalScoreText = document.getElementById('finalScore');\n        finalScoreText.innerHTML = `\n            <div style=\"font-size: 32px; margin-bottom: 20px;\">Game Over!</div>\n            <div style=\"font-size: 24px; margin-bottom: 10px\">Final Score: ${score}</div>\n            <div style=\"font-size: 20px; margin-bottom: 20px\">High Score: ${highScore}</div>\n            <button onclick=\"resetGame()\" style=\"\n                padding: 15px 30px;\n                font-size: 20px;\n                background: #4CAF50;\n                color: white;\n                border: none;\n                border-radius: 5px;\n                cursor: pointer;\n                margin-top: 20px;\n            \">Play Again</button>\n        `;\n        \n        gameOverScreen.style.display = 'flex';\n        gameOverScreen.style.flexDirection = 'column';\n        gameOverScreen.style.alignItems = 'center';\n        gameOverScreen.style.justifyContent = 'center';\n    }\n}\n\n// Game loop\nfunction gameLoop() {\n    if (!gameActive) return;\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    spawnTarget();\n    updateTargets();\n    drawTargets();\n\n    requestAnimationFrame(gameLoop);\n}\n\n// Event listeners\ncanvas.addEventListener('click', shoot);\ndocument.addEventListener('keypress', (e) => {\n    if (e.key === 'r') reload();\n});\n\nstartButton.addEventListener('click', () => {\n    gameActive = true;\n    startButton.style.display = 'none';\n    gameLoop();\n});\n\n// Initialize game\ninitializeCamera();\nupdateHUD();",
      "status": "",
      "output": "",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": false
}